// -----------------------------------------------------
// browse-support
// -----------------------------------------------------

// MUST applied to `<html> for optimise text
%optimize-rendering-text {
  text-rendering: optimizeLegibility;
}

// MUST applied to `<html> for optimise flexbox
%border-box-on-every-element  {
  *,
  *::after,
  *::before {
    box-sizing: border-box;
  }
}

/// Applies the micro clearfix hack popularized by Nicolas Gallagher. Include this mixin on a container if its children are all floated, to give the container a proper height.
/// The clearfix is augmented with specific styles to prevent borders in flexbox environments
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix Hack
/// @link http://danisadesigner.com/blog/flexbox-clear-fix-pseudo-elements/ Flexbox fix

%clearfix {
  &::before,
  &::after {
    content: " ";
    display: table;
    flex-basis: 0;
    order: 1;
  }
  &:after {
    clear: both;
  }
}

// -----------------------------------------------------
// Colors
// -----------------------------------------------------

/// Given an opacity value, generates that value as well as a way to display that opacity value in Internet Explorer 8 and 9.
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
}

// -----------------------------------------------------
// Position
// -----------------------------------------------------

/// Shorthandizes position declarations.
/// @param {String} $type - Either `relative`, `absolute` or `fixed`
/// example:  @include position(absolute, $top: 10px, $left: 10px);
@mixin position($type, $top: null, $right: null, $bottom: null, $left: null) {
  position: $type;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

/// Vertically centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin vertical-center {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

/// Horizontally centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin horizontal-center {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

/// Absolutely centers the element inside of its first non-static parent,
/// @link http://www.sitepoint.com/centering-with-sass/ Centering With Sass
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}


// -----------------------------------------------------
// Images
// -----------------------------------------------------

/// Retina image media query helper; given an image path with a 2x-sized version of an image, will load that image as a background-image on high-resolution devices.
///     @include image-2x('../images/image.png', 100%, auto);
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
  }
}

// -----------------------------------------------------
// Typography
// -----------------------------------------------------

// reproduces that font size in ems
@mixin font-size($size) {
  font-size: calc-em($size);
}

// Generates line-height values in both pixels and rems.
@mixin line-height($height-value: 12) {
    line-height: $height-value * 1px; //fallback for old browsers
    line-height: (1 / ($base-font-size / ($base-font-size * 0 + 1)) * $height-value * 1em);
  }

// Given the location of a webfont, will generate a font-face declaration with multiple file formats.
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + '.eot');
    src: url($file-name + '.eot?#iefix')  format('embedded-opentype'),
    url($file-name + '.woff') format('woff'),
    url($file-name + '.ttf')  format('truetype'),
    url($file-name + '.svg##{$font-name}')  format('svg');
    font-weight: $weight;
    font-style: $style;
  }
}


// -----------------------------------------------------
// Size
// -----------------------------------------------------

@mixin wrapper($wrapper-width: 100%) {
  max-width: calc-em($wrapper-width);
  margin: 0 auto;
  @extend %clearfix;
}

@mixin container($width: 100%, $padding: 0, $margin: 0) {
  flex: 1;
  max-width: calc-em($width);
  padding: calc-em($padding);
  margin: calc-em($margin);
}

// Sizing helper
@mixin size($width, $height: auto) {
  max-width: calc-em($width);
  height: calc-em($height);
}

// -----------------------------------------------------
// Transition
// -----------------------------------------------------

/// Transition helper
// example @include transition(0.3s, ease-in);
@mixin transition($time: 1s, $timing-function: ease-in-out) {
  @include prefix(transition, all $time $timing-function, 'webkit');
}

/// Slide-in-from creates and calls an animation that slides an element on a given axis for a given amount of space.
// example @include slide-in-from(y, -200px, 3s ease alternate infinite);
@mixin slide-in-from($slide-axis: x, $slide-offset: -100px, $animation-properties: 3s ease-out) {
  $slide-start: if($slide-axis == x, translateX($slide-offset), translateY($slide-offset));
  $slide-end: if($slide-axis == x, translateX(0), translateY(0));

  @include keyframes(slide-in-#{$slide-axis}-#{$slide-offset}){
    0% {
      @include opacity(0);
      @include transform($slide-start);
    }
    75% {
      @include transform($slide-end);
    }
    100% {
      @include opacity(1);
    }
  }

  @include prefix(animation, slide-in-#{$slide-axis}-#{$slide-offset} $animation-properties, 'webkit');
}

